#!/usr/bin/env node

/**
 * Script Principal do Git
 * 
 * Este script √© o ponto de entrada para todos os comandos Git do projeto.
 * 
 * Uso: node src/scripts/git/index.js [comando] [op√ß√µes]
 * 
 * Comandos dispon√≠veis:
 * - deploy [mensagem] - Deploy autom√°tico (dev ‚Üí beta ‚Üí main)
 * - status - Status detalhado do reposit√≥rio
 * - cleanup [--force] - Limpeza do reposit√≥rio
 * - help - Mostra esta ajuda
 */

import { deploy } from './deploy.js';
import { status } from './status.js';
import { cleanup } from './cleanup.js';
import { pushDev } from './push-dev.js';

// Cores para output
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function showHelp() {
    log('üõ†Ô∏è  Scripts Git - API Node.js', 'bright');
    log('=' .repeat(50), 'cyan');
    
    log('\nüìã Comandos dispon√≠veis:', 'green');
    log('   deploy [mensagem]  - Deploy autom√°tico (dev ‚Üí beta ‚Üí main)', 'cyan');
    log('   push-dev [mensagem] - Push para branch dev', 'cyan');
    log('   status            - Status detalhado do reposit√≥rio', 'cyan');
    log('   cleanup [--force] - Limpeza do reposit√≥rio', 'cyan');
    log('   help              - Mostra esta ajuda', 'cyan');
    
    log('\nüí° Exemplos de uso:', 'yellow');
    log('   npm run git:deploy "feat: nova funcionalidade"', 'cyan');
    log('   npm run git:push-dev "fix: corre√ß√£o de bug"', 'cyan');
    log('   npm run git:status', 'cyan');
    log('   npm run git:cleanup', 'cyan');
    log('   npm run git:cleanup --force', 'cyan');
    
    log('\nüîó Scripts npm dispon√≠veis:', 'green');
    log('   npm run git:deploy  - Deploy autom√°tico', 'cyan');
    log('   npm run git:push-dev - Push para branch dev', 'cyan');
    log('   npm run git:status  - Status do reposit√≥rio', 'cyan');
    log('   npm run git:cleanup - Limpeza do reposit√≥rio', 'cyan');
    
    log('\nüìö Documenta√ß√£o:', 'green');
    log('   README.md - Documenta√ß√£o principal do projeto', 'cyan');
    log('   docs/ - Documenta√ß√£o t√©cnica detalhada', 'cyan');
}

function main() {
    const command = process.argv[2];
    const args = process.argv.slice(3);
    
    switch (command) {
        case 'deploy':
            deploy();
            break;
            
        case 'push-dev':
            pushDev();
            break;
            
        case 'status':
            status();
            break;
            
        case 'cleanup':
            cleanup();
            break;
            
        case 'help':
        case '--help':
        case '-h':
            showHelp();
            break;
            
        default:
            if (!command) {
                log('‚ùå Nenhum comando especificado', 'red');
            } else {
                log(`‚ùå Comando desconhecido: ${command}`, 'red');
            }
            log('\nüí° Use "npm run git:help" para ver os comandos dispon√≠veis', 'yellow');
            showHelp();
            process.exit(1);
    }
}

// Executar sempre
main();

export { main, deploy, pushDev, status, cleanup };
